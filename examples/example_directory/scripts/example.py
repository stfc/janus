"""
Example script for the overall workflow.
"""

# TODO remove this once module is installed properly
import sys
sys.path.append('/home/vol00/scarf860/cc_placement/CC_HDNNP/src')

from data import Data

def prepare_cp2k():
    """
    The first step is to prepare the files needed for cp2k:
      - Co-ordinate files (.xyz)
      - cp2k .inp files
      - .bat files

    After this, all batch scripts should be run in order to generate the cp2k
    output files for force and energy values
    """
    d = Data('../')
    d.read_trajectory('example_trajectory.history')
    d.write_xyz('xyz/{}.xyz')
    d.write_cp2k(file_batch='scripts/cp2k_batch_{}.bat',
                 file_input='cp2k_input/example_{}.inp',
                 file_xyz='xyz/{}.xyz',
                 n_config=101,
                 cutoff=(600,),
                 relcutoff=(60,))


def prepare_n2p2():
    """
    The second step is to prepare the files needed for n2p2 from those generated by cp2k:
      - input.data
      - input.nn

    After this, n2p2 commands should be run as usual.
    """
    d = Data('../')
    d.write_n2p2_data(file_log='cp2k_output/example_n_{}_cutoff_600_relcutoff_60.log',
                      file_forces='cp2k_output/example_n_{}_cutoff_600_relcutoff_60-forces-1_0.xyz',
                      file_xyz='xyz/{}.xyz',
                      file_input='n2p2/input.data',
                      n_config=101)

    # Multiple different symmetry functions can be written to the same file,
    # for example both shifted and centered versions of the radial, wide and
    # narrow functions
    d.write_n2p2_nn(file_template='input.nn.template',
                    file_nn='input.nn',
                    elements=['H', 'C', 'O'],
                    r_cutoff=12.0,
                    type='radial',
                    rule='imbalzano2018',
                    mode='center',
                    n_pairs=5)
    d.write_n2p2_nn(file_template='input.nn.template',
                    file_nn='input.nn',
                    elements=['H', 'C', 'O'],
                    r_cutoff=12.0,
                    type='angular_narrow',
                    rule='imbalzano2018',
                    mode='center',
                    n_pairs=5,
                    zetas=[1])
    d.write_n2p2_nn(file_template='input.nn.template',
                    file_nn='input.nn',
                    elements=['H', 'C', 'O'],
                    r_cutoff=12.0,
                    type='angular_wide',
                    rule='imbalzano2018',
                    mode='center',
                    n_pairs=5,
                    zetas=[1])
    d.write_n2p2_nn(file_template='input.nn.template',
                    file_nn='input.nn',
                    elements=['H', 'C', 'O'],
                    r_cutoff=12.0,
                    type='radial',
                    rule='imbalzano2018',
                    mode='shift',
                    n_pairs=5)
    d.write_n2p2_nn(file_template='input.nn.template',
                    file_nn='input.nn',
                    elements=['H', 'C', 'O'],
                    r_cutoff=12.0,
                    type='angular_narrow',
                    rule='imbalzano2018',
                    mode='shift',
                    n_pairs=5,
                    zetas=[1])
    d.write_n2p2_nn(file_template='input.nn.template',
                    file_nn='input.nn',
                    elements=['H', 'C', 'O'],
                    r_cutoff=12.0,
                    type='angular_wide',
                    rule='imbalzano2018',
                    mode='shift',
                    n_pairs=5,
                    zetas=[1])

def prepare_lammps():
    """
    Finally prepare the files needed for LAMMPS:
      - Data file (.data)
      - LAMMPS input script (.lmp)

    After this, LAMMPS can be run using the learnt potential for the LAMMPS
    pair command.
    """
    d = Data('../')
    d.write_lammps_data(file_xyz='xyz/0.xyz', lammps_unit_style='metal')
    d.write_lammps_pair(elements=['H', 'C', 'O'], r_cutoff=12., lammps_unit_style='metal')
